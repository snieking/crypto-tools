{"version":3,"sources":["components/AssymetricEncryption.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","wrapper","padding","width","icon","marginRight","textFieldWrapper","display","margin","textArea","marginBottom","marginLeft","button","AssymetricEncryption","classes","useState","KeyPair","keyPair","setKeyPair","inputIsHex","setInputIsHex","input","setInput","output","setOutput","className","variant","component","onClick","id","label","type","InputLabelProps","shrink","value","pubKey","toString","fullWidth","privKey","onChange","event","h","target","Boolean","match","multiline","rows","disabled","console","log","encrypted","encrypt","Buffer","from","decrypted","decrypt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecefa959.chunk.js","sourcesContent":["import {\n  Button,\n  createStyles,\n  makeStyles,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { KeyPair } from 'ft3-lib';\nimport { decrypt, encrypt } from 'eciesjs';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      padding: '25px',\n      width: '90%',\n    },\n    icon: {\n      marginRight: '5px',\n    },\n    textFieldWrapper: {\n      display: 'inline-block',\n      width: '640px',\n      margin: '25px',\n    },\n    textArea: {\n      width: '820px',\n      marginBottom: '10px',\n      marginLeft: '10px',\n    },\n    button: {\n      margin: '5px',\n    },\n  })\n);\n\nconst AssymetricEncryption: React.FunctionComponent = () => {\n  const classes = useStyles();\n  const [keyPair, setKeyPair] = useState<KeyPair>(new KeyPair());\n  const [inputIsHex, setInputIsHex] = useState(false);\n  const [input, setInput] = useState<string>('');\n  const [output, setOutput] = useState<string>('');\n\n  function isHex(h: string) {\n    return Boolean(h.match(/^[0-9A-Fa-f]+$/i));\n  }\n\n  function encryptInput() {\n    console.log('Encrypting', input);\n    const encrypted = encrypt(\n      keyPair.pubKey.toString('hex'),\n      Buffer.from(input)\n    );\n    console.log('Encrypted: ', encrypted.toString('utf8'));\n    setOutput(encrypted.toString('hex'));\n  }\n\n  function decryptInput() {\n    const decrypted = decrypt(keyPair.privKey, Buffer.from(input, 'hex'));\n    setOutput(decrypted.toString('utf8'));\n  }\n\n  return (\n    <Paper className={classes.wrapper}>\n      <Typography variant='h2' component='h2'>\n        Assymetric Encryption\n      </Typography>\n      <Button variant='outlined' onClick={() => setKeyPair(new KeyPair())}>\n        <RefreshIcon className={classes.icon} /> New Key Pair\n      </Button>\n      <div className={classes.textFieldWrapper}>\n        <TextField\n          id='pubKey'\n          label='Public'\n          type='text'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={keyPair.pubKey.toString('hex')}\n          variant='outlined'\n          fullWidth\n        />\n      </div>\n      <div className={classes.textFieldWrapper}>\n        <TextField\n          id='pubKey'\n          label='Private'\n          type='text'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={keyPair.privKey.toString('hex')}\n          variant='outlined'\n          fullWidth\n        />\n      </div>\n      <div>\n        <TextField\n          className={classes.textArea}\n          label='Input'\n          type='text'\n          value={input}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setInput(event.target.value);\n            setInputIsHex(isHex(event.target.value));\n          }}\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n        ></TextField>\n        <TextField\n          className={classes.textArea}\n          label='Output'\n          type='text'\n          value={output}\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n          disabled\n        ></TextField>\n      </div>\n      <div>\n        <Button\n          className={classes.button}\n          variant='outlined'\n          onClick={encryptInput}\n        >\n          Encrypt\n        </Button>\n        <Button\n          className={classes.button}\n          variant='outlined'\n          onClick={decryptInput}\n          disabled={!inputIsHex}\n        >\n          Decrypt\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n\nexport default AssymetricEncryption;\n","import React from 'react';\nimport './App.css';\nimport AssymetricEncryption from './components/AssymetricEncryption';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <AssymetricEncryption />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}