{"version":3,"sources":["components/AssymetricEncryption.tsx","components/Signing.tsx","components/AssymetricOperations.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","wrapper","padding","width","icon","marginRight","textFieldWrapper","display","margin","textArea","marginBottom","marginLeft","button","AssymetricEncryption","props","classes","useState","inputIsHex","setInputIsHex","input","setInput","output","setOutput","className","label","type","value","onChange","event","h","target","Boolean","match","multiline","rows","fullWidth","variant","disabled","onClick","console","log","encrypted","encrypt","keyPair","pubKey","toString","Buffer","from","decrypted","decrypt","privKey","Signing","sha256Hash","crypto","update","digest","a","hash","eccrypto","signature","alert","TextField","Button","AssymetricOperations","KeyPair","setKeyPair","Paper","Typography","component","id","InputLabelProps","shrink","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cdd06ef.chunk.js","sourcesContent":["import {\n  Button,\n  createStyles,\n  makeStyles,\n  TextField,\n  Theme,\n} from '@material-ui/core';\nimport { KeyPair } from 'ft3-lib';\nimport { decrypt, encrypt } from 'eciesjs';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      padding: '25px',\n      width: '90%',\n    },\n    icon: {\n      marginRight: '5px',\n    },\n    textFieldWrapper: {\n      display: 'inline-block',\n      width: '640px',\n      margin: '25px',\n    },\n    textArea: {\n      width: '820px',\n      marginBottom: '10px',\n      marginLeft: '10px',\n    },\n    button: {\n      margin: '5px',\n    },\n  })\n);\n\ninterface Props {\n  keyPair: KeyPair;\n}\n\nconst AssymetricEncryption: React.FunctionComponent<Props> = (props: Props) => {\n  const classes = useStyles();\n  const [inputIsHex, setInputIsHex] = useState(false);\n  const [input, setInput] = useState<string>('');\n  const [output, setOutput] = useState<string>('');\n\n  function isHex(h: string) {\n    return Boolean(h.match(/^[0-9A-Fa-f]+$/i));\n  }\n\n  function encryptInput() {\n    console.log('Encrypting', input);\n    const encrypted = encrypt(\n      props.keyPair.pubKey.toString('hex'),\n      Buffer.from(input)\n    );\n    console.log('Encrypted: ', encrypted.toString('utf8'));\n    setOutput(encrypted.toString('hex'));\n  }\n\n  function decryptInput() {\n    const decrypted = decrypt(props.keyPair.privKey, Buffer.from(input, 'hex'));\n    setOutput(decrypted.toString('utf8'));\n  }\n\n  return (\n    <>\n      <div>\n        <TextField\n          className={classes.textArea}\n          label='Input'\n          type='text'\n          value={input}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setInput(event.target.value);\n            setInputIsHex(isHex(event.target.value));\n          }}\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n        ></TextField>\n        <TextField\n          className={classes.textArea}\n          label='Output'\n          type='text'\n          value={output}\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n          disabled\n        ></TextField>\n      </div>\n      <div>\n        <Button\n          className={classes.button}\n          variant='outlined'\n          onClick={encryptInput}\n        >\n          Encrypt\n        </Button>\n        <Button\n          className={classes.button}\n          variant='outlined'\n          onClick={decryptInput}\n          disabled={!inputIsHex}\n        >\n          Decrypt\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default AssymetricEncryption;\n","import { Button, createStyles, TextField, Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core';\nimport { KeyPair } from 'ft3-lib';\nimport { useState } from 'react';\nimport * as crypto from 'crypto';\nimport * as eccrypto from 'eccrypto';\n\ninterface Props {\n  keyPair: KeyPair;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      padding: '25px',\n      width: '90%',\n    },\n    icon: {\n      marginRight: '5px',\n    },\n    textFieldWrapper: {\n      display: 'inline-block',\n      width: '640px',\n      margin: '25px',\n    },\n    textArea: {\n      width: '820px',\n      marginBottom: '10px',\n      marginLeft: '10px',\n    },\n    button: {\n      margin: '5px',\n    },\n  })\n);\n\nconst Signing: React.FunctionComponent<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  const [input, setInput] = useState<string>('');\n  const [output, setOutput] = useState<string>('');\n\n  function sha256Hash(input: string) {\n    return crypto.createHash('sha256').update(input).digest();\n  }\n\n  async function sign() {\n    const hash = sha256Hash(input);\n    const signature = await eccrypto.sign(props.keyPair.privKey, hash);\n    setOutput(signature.toString('hex'));\n  }\n\n  async function verify() {\n    const hash = sha256Hash(input);\n    try {\n      await eccrypto.verify(props.keyPair.pubKey, hash, output);\n    } catch {\n      alert('Signature is invalid');\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <TextField\n          className={classes.textArea}\n          label='Message'\n          type='text'\n          value={input}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            setInput(event.target.value)\n          }\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n        ></TextField>\n        <TextField\n          className={classes.textArea}\n          label='Signature'\n          type='text'\n          value={output}\n          multiline\n          rows={6}\n          fullWidth\n          variant='outlined'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            setOutput(event.target.value)\n          }\n        ></TextField>\n      </div>\n      <div>\n        <Button className={classes.button} variant='outlined' onClick={sign}>\n          Sign Message\n        </Button>\n        <Button className={classes.button} variant='outlined' onClick={verify}>\n          Verify Signature\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Signing;\n","import {\n  Button,\n  createStyles,\n  makeStyles,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { KeyPair } from 'ft3-lib';\nimport React, { useState } from 'react';\nimport AssymetricEncryption from './AssymetricEncryption';\nimport Signing from './Signing';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      padding: '25px',\n      width: '90%',\n    },\n    icon: {\n      marginRight: '5px',\n    },\n    textFieldWrapper: {\n      display: 'inline-block',\n      width: '640px',\n      margin: '25px',\n    },\n    textArea: {\n      width: '820px',\n      marginBottom: '10px',\n      marginLeft: '10px',\n    },\n    button: {\n      margin: '5px',\n    },\n  })\n);\n\nconst AssymetricOperations: React.FunctionComponent = () => {\n  const classes = useStyles();\n\n  const [keyPair, setKeyPair] = useState<KeyPair>(new KeyPair());\n  return (\n    <Paper className={classes.wrapper}>\n      <Typography variant='h2' component='h2'>\n        Assymetric Operations\n      </Typography>\n      <Button variant='outlined' onClick={() => setKeyPair(new KeyPair())}>\n        <RefreshIcon className={classes.icon} /> New Key Pair\n      </Button>\n      <div className={classes.textFieldWrapper}>\n        <TextField\n          id='pubKey'\n          label='Public'\n          type='text'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={keyPair.pubKey.toString('hex')}\n          variant='outlined'\n          fullWidth\n        />\n      </div>\n      <div className={classes.textFieldWrapper}>\n        <TextField\n          id='pubKey'\n          label='Private'\n          type='text'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={keyPair.privKey.toString('hex')}\n          variant='outlined'\n          fullWidth\n        />\n      </div>\n      <AssymetricEncryption keyPair={keyPair} />\n      <br />\n      <Signing keyPair={keyPair} />\n    </Paper>\n  );\n};\n\nexport default AssymetricOperations;\n","import React from 'react';\nimport './App.css';\nimport AssymetricOperations from './components/AssymetricOperations';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <AssymetricOperations />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}